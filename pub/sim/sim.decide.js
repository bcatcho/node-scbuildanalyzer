// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, root, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  _ = root._;

  SCSim.Hud = (function() {

    Hud.name = 'Hud';

    function Hud(emitter) {
      this.minerals = 0;
      this.gas = 0;
      this.supply = 0;
      this.supplyCap = 10;
      this.production = {};
      this.alerts = [];
      this.economy = {};
      this.units = {};
      this.buildings = {};
      this.events = {};
      this.emitter = emitter;
      this.setupEvents();
    }

    Hud.prototype.addEvent = function(eventName, filter, callBack) {
      return this.emitter.observe(eventName, function(eventObj) {
        return callBack(filter(eventObj));
      });
    };

    Hud.prototype.setupEvents = function() {
      var _this = this;
      this.addEvent("depositMinerals", function(e) {
        return e.args[0];
      }, function(minAmt) {
        return _this.minerals += minAmt;
      });
      this.addEvent("trainUnitComplete", function(e) {
        return e.args[0].actorName;
      }, function(unitName) {
        var u;
        u = SCSim.data.units[unitName];
        return _this.supply += u.supply;
      });
      this.addEvent("supplyCapIncreased", function(e) {
        return e.args[0];
      }, function(supplyAmt) {
        return _this.supplyCap += supplyAmt;
      });
      return this.addEvent("purchase", function(e) {
        return e.args[0];
      }, function(unitName) {
        var u;
        u = SCSim.data[unitName];
        _this.minerals -= u.min;
        return _this.gas -= u.gas;
      });
    };

    return Hud;

  })();

  SCSim.GameRules = (function() {

    GameRules.name = 'GameRules';

    function GameRules(gameData) {
      this.gameData = gameData;
    }

    GameRules.prototype.canTrainUnit = function(unitName, hud) {
      var constraints, unit;
      unit = this.gameData.get(unitName);
      constraints = [this.canAfford, this.hasEnoughSupply, this.hasTechPath];
      return constraints.reduce((function(acc, fn) {
        return acc && fn(unit, hud);
      }), true);
    };

    GameRules.prototype.canAfford = function(data, hud) {
      return hud.gas >= data.gas && hud.minerals >= data.min;
    };

    GameRules.prototype.hasEnoughSupply = function(data, hud) {
      return data.supply <= hud.supply + hud.supplyCap;
    };

    GameRules.prototype.hasTechPath = function(data, hud) {
      return true;
    };

    return GameRules;

  })();

  SCSim.VirtualControls = (function() {

    VirtualControls.name = 'VirtualControls';

    function VirtualControls() {}

    return VirtualControls;

  })();

  SCSim.Smarts = (function() {

    Smarts.name = 'Smarts';

    function Smarts() {}

    return Smarts;

  })();

  SCSim.SimRun = (function() {

    SimRun.name = 'SimRun';

    function SimRun(smarts) {
      this.smarts = smarts;
      this.emitter = new SCSim.EventEmitter;
      this.hud = new SCSim.Hud(this.emitter);
      this.sim = new SCSim.Simulation(this.emitter);
    }

    SimRun.prototype.update = function() {
      return this.sim.update();
    };

    SimRun.prototype.start = function() {
      return this.sim.say("start");
    };

    return SimRun;

  })();

  SCSim.Simulation = (function(_super) {

    __extends(Simulation, _super);

    Simulation.name = 'Simulation';

    function Simulation(emitter) {
      this.gameData = SCSim.data;
      this.subActors = {};
      this.emitter = emitter;
      this.time = new SCSim.SimTime;
      this.beingBuilt = [];
      Simulation.__super__.constructor.call(this);
      this.instantiate();
    }

    Simulation.prototype.makeActor = function(name, a, b, c, d) {
      var actorData, instance;
      actorData = this.gameData.get(name);
      instance = new SCSim.Actor(actorData.behaviors, a, b, c, d);
      instance.actorName = name;
      instance.sim = this;
      instance.simId = _.uniqueId();
      instance.emitter = this.emitter;
      instance.time = this.time;
      this.subActors[instance.simId] = instance;
      if (typeof instance.instantiate === "function") {
        instance.instantiate();
      }
      return instance;
    };

    Simulation.prototype.getActor = function(simId) {
      return this.subActors[simId];
    };

    Simulation.defaultState({
      messages: {
        start: function() {
          return this.go("running");
        }
      }
    });

    Simulation.state("running", {
      update: function() {
        return function(t) {
          var actr, _results;
          this.time.step(1);
          _results = [];
          for (actr in this.subActors) {
            _results.push(this.subActors[actr].update(this.time.sec));
          }
          return _results;
        };
      },
      messages: {
        buildStructure: function(name) {
          var s;
          s = SCSim.data.get("name");
          this.say("purchase", name);
          return this.beingBuilt.push(name);
        }
      }
    });

    Simulation.prototype.say = function(msgName, a, b, c, d) {
      var _ref1, _ref2;
      if ((_ref1 = this.emitter) != null) {
        _ref1.fire(msgName, {
          name: msgName,
          time: this.time,
          simId: this.simId,
          args: [a, b, c, d]
        });
      }
      return (_ref2 = this.messages[msgName]) != null ? _ref2.call(this, a, b, c, d) : void 0;
    };

    Simulation.prototype.get = function(name, a, b, c, d) {
      if (this[name] !== void 0) {
        this[name].call(behavior, a, b, c, d);
      }
      return console.warn("failed to get " + prop);
    };

    return Simulation;

  })(SCSim.Behavior);

}).call(this);
