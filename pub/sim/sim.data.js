// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, behave, neutrals, root, structures, units, _ref,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  SCSim.config = {
    secsPerTick: .5,
    harvesterOverlapThreshold: .3
  };

  SCSim.GameData = (function() {

    GameData.name = 'GameData';

    function GameData() {
      this.units = {};
      this.structures = {};
      this.neutrals = {};
    }

    GameData.prototype.addUnit = function() {
      var behaviors, buildTime, gas, min, name, supply;
      name = arguments[0], min = arguments[1], gas = arguments[2], buildTime = arguments[3], supply = arguments[4], behaviors = 6 <= arguments.length ? __slice.call(arguments, 5) : [];
      return this.units[name] = {
        min: min,
        gas: gas,
        buildTime: buildTime,
        supply: supply,
        behaviors: behaviors
      };
    };

    GameData.prototype.addStructure = function() {
      var behaviors, buildTime, gas, min, name;
      name = arguments[0], min = arguments[1], gas = arguments[2], buildTime = arguments[3], behaviors = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
      return this.structures[name] = {
        min: min,
        gas: gas,
        buildTime: buildTime,
        behaviors: behaviors
      };
    };

    GameData.prototype.addNeutral = function() {
      var behaviors, name;
      name = arguments[0], behaviors = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.neutrals[name] = {
        behaviors: behaviors
      };
    };

    GameData.prototype.get = function(name) {
      return this.units[name] || this.structures[name] || this.neutrals[name];
    };

    return GameData;

  })();

  behave = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return {
      name: name,
      args: args
    };
  };

  units = [["probe", 50, 0, 17, 1, behave("Harvester"), behave("Trainable")]];

  structures = [["pylon", 100, 0, 25, behave("Trainable"), behave("SupplyStructure", 10)], ["nexus", 400, 0, 100, behave("PrimaryStructure"), behave("Trainer")]];

  neutrals = [["minPatch", behave("MinPatch")]];

  SCSim.loadDefaultData = function(gameData) {
    var n, s, u, _i, _j, _k, _len, _len1, _len2, _results;
    for (_i = 0, _len = units.length; _i < _len; _i++) {
      u = units[_i];
      gameData.addUnit.apply(gameData, u);
    }
    for (_j = 0, _len1 = structures.length; _j < _len1; _j++) {
      s = structures[_j];
      gameData.addStructure.apply(gameData, s);
    }
    _results = [];
    for (_k = 0, _len2 = neutrals.length; _k < _len2; _k++) {
      n = neutrals[_k];
      _results.push(gameData.addNeutral.apply(gameData, n));
    }
    return _results;
  };

  SCSim.data = new SCSim.GameData;

  SCSim.loadDefaultData(SCSim.data);

}).call(this);
