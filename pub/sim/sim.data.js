// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, behave, neutral, root, structure, unit, _ref,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  unit = function() {
    var behaviors, buildTime, gas, min, supply;
    min = arguments[0], gas = arguments[1], buildTime = arguments[2], supply = arguments[3], behaviors = 5 <= arguments.length ? __slice.call(arguments, 4) : [];
    return {
      min: min,
      gas: gas,
      buildTime: buildTime,
      supply: supply,
      behaviors: behaviors
    };
  };

  structure = function() {
    var behaviors, buildTime, gas, min;
    min = arguments[0], gas = arguments[1], buildTime = arguments[2], behaviors = 4 <= arguments.length ? __slice.call(arguments, 3) : [];
    return {
      min: min,
      gas: gas,
      buildTime: buildTime,
      behaviors: behaviors
    };
  };

  neutral = function() {
    var behaviors;
    behaviors = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return {
      behaviors: behaviors
    };
  };

  behave = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return {
      name: name,
      args: args
    };
  };

  SCSim.config = {
    secsPerTick: .5,
    harvesterOverlapThreshold: .3
  };

  SCSim.data = {
    get: function(name) {
      return this.units[name] || this.structure[name] || this.neutral[name];
    },
    units: {
      probe: unit(50, 0, 17, 1, behave("Harvester"), behave("Trainable"))
    },
    structure: {
      pylon: structure(100, 0, 25, behave("Trainable"), behave("SupplyStructure", 10)),
      nexus: structure(400, 0, 100, behave("PrimaryStructure"), behave("Trainer"))
    },
    neutral: {
      minPatch: neutral(behave("MinPatch"))
    }
  };

}).call(this);
