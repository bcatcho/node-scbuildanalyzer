// Generated by CoffeeScript 1.3.3
(function() {
  var SCSim, root, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  _ = root._;

  SCSim.PrimaryStructure = (function(_super) {

    __extends(PrimaryStructure, _super);

    function PrimaryStructure() {
      this.mineralAmt = 0;
      this._mins = [];
      this._rallyResource;
      PrimaryStructure.__super__.constructor.call(this);
    }

    PrimaryStructure.prototype.rallyResource = function() {
      return this._rallyResource;
    };

    PrimaryStructure.prototype.mins = function() {
      return this._mins;
    };

    PrimaryStructure.prototype.instantiate = function() {
      var i, min, _i;
      PrimaryStructure.__super__.instantiate.call(this);
      for (i = _i = 1; _i <= 8; i = ++_i) {
        min = this.sim.makeActor("minPatch");
        min.say("setBase", this);
        this._mins.push(min);
      }
      return this._rallyResource = this._mins[0];
    };

    PrimaryStructure.prototype.getMostAvailableMinPatch = function() {
      return _(this._mins).min(function(m) {
        return m.get("targetedBy");
      });
    };

    PrimaryStructure.defaultState({
      messages: {
        depositMinerals: function(minAmt) {
          return this.mineralAmt += minAmt;
        },
        trainUnitComplete: function(unit) {
          return unit.say("gatherFromResource", this._rallyResource);
        }
      }
    });

    return PrimaryStructure;

  })(SCSim.Behavior);

  SCSim.SupplyStructure = (function(_super) {

    __extends(SupplyStructure, _super);

    function SupplyStructure() {
      SupplyStructure.__super__.constructor.call(this);
    }

    SupplyStructure.prototype.instantiate = function(supply) {
      this.supplyAmt = supply;
      return SupplyStructure.__super__.instantiate.call(this);
    };

    SupplyStructure.defaultState({
      messages: {
        trainingComplete: function() {
          return this.say("supplyCapIncreased", this.supplyAmt);
        }
      }
    });

    return SupplyStructure;

  })(SCSim.Behavior);

  SCSim.MinPatch = (function(_super) {

    __extends(MinPatch, _super);

    function MinPatch() {
      this.amt = 1000;
      this._base;
      this._targetedBy = 0;
      MinPatch.__super__.constructor.call(this);
    }

    MinPatch.prototype.base = function() {
      return this._base;
    };

    MinPatch.prototype.targetedBy = function() {
      return this._targetedBy;
    };

    MinPatch.prototype.getClosestAvailableResource = function() {
      return this._base.get("getMostAvailableMinPatch");
    };

    MinPatch.prototype.getMostAvailableResource = function() {
      if (this._targetedBy > 0) {
        return this._base.get("getMostAvailableMinPatch");
      }
    };

    MinPatch.prototype.isSaturated = function() {
      return this._targetedBy >= 1;
    };

    MinPatch.prototype.resourcesForHarvesterCount = function() {
      var collectionRate, rate;
      if (this._targetedBy === 0) {
        collectionRate = 0;
      }
      if (this._targetedBy === 1) {
        collectionRate = 40;
      }
      if (this._targetedBy === 2) {
        collectionRate = 80;
      }
      if (this._targetedBy > 2) {
        collectionRate = 100;
      }
      rate = SCSim.config.secsPerTick * (collectionRate / 60);
      return rate;
    };

    MinPatch.defaultState({
      update: function() {
        return function(t) {
          var collectionAmt;
          collectionAmt = this.resourcesForHarvesterCount();
          return this.say("mineralsHarvested", collectionAmt);
        };
      },
      messages: {
        setBase: function(base) {
          return this._base = base;
        },
        mineralsHarvested: function(amtHarvested) {
          this._base.say("depositMinerals", amtHarvested);
          return this.amt -= amtHarvested;
        },
        targetedByHarvester: function() {
          return this._targetedBy += 1;
        },
        untargetedByHarvester: function() {
          return this._targetedBy -= 1;
        }
      }
    });

    return MinPatch;

  })(SCSim.Behavior);

  SCSim.Harvester = (function(_super) {

    __extends(Harvester, _super);

    function Harvester() {
      this.t_toBase = 2;
      this.t_toPatch = 2;
      this.t_mine = 1.5;
      this.targetResource;
      this.collectAmt = 5;
      Harvester.__super__.constructor.call(this);
    }

    Harvester.defaultState({
      messages: {
        gatherFromResource: function(resource) {
          var nextResource;
          this.targetResource = resource;
          if ((nextResource = this.targetResource.get("getMostAvailableResource"))) {
            this.say("changeTargetResource");
            this.targetResource = nextResource;
          }
          return this.targetResource.say("targetedByHarvester");
        }
      }
    });

    return Harvester;

  })(SCSim.Behavior);

}).call(this);
