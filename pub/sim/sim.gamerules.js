// Generated by CoffeeScript 1.3.3
(function() {
  var SCSim, root, _, _ref,
    __slice = [].slice;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  _ = root._;

  SCSim.GameRules = (function() {

    function GameRules(gameData) {
      this.gameData = gameData;
    }

    GameRules.prototype.canTrainUnit = function(unitName, hud) {
      var data;
      data = this.gameData.get(unitName);
      return this.meetsCriteria(data, hud, this.canAfford, this.hasEnoughSupply, this.hasTechPath);
    };

    GameRules.prototype.canAfford = function(data, hud) {
      return hud.gas >= data.gas && hud.minerals >= data.min;
    };

    GameRules.prototype.hasEnoughSupply = function(data, hud) {
      return data.supply <= hud.supplyCap - hud.supply;
    };

    GameRules.prototype.hasTechPath = function(data, hud) {
      return true;
    };

    GameRules.prototype.meetsCriteria = function() {
      var criteria, data, hud;
      data = arguments[0], hud = arguments[1], criteria = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      return criteria.reduce((function(acc, c) {
        return acc && c(data, hud);
      }), true);
    };

    return GameRules;

  })();

  SCSim.GameCmdInterpreter = (function() {

    function GameCmdInterpreter(hud, rules) {
      this.hud = hud;
      this.rules = rules;
      false;
    }

    GameCmdInterpreter.prototype.execute = function(cmd, hud, rules) {
      return false;
    };

    return GameCmdInterpreter;

  })();

  SCSim.GameCmd = (function() {

    function GameCmd(subjectName, subjectType) {
      this.subjectName = subjectName;
      this.subjectType = subjectType;
      this.verb;
      this.predicateName;
      this.predicateType;
    }

    GameCmd.select = function(subjectType, subjectName) {
      return new this(subjectType, subjectName);
    };

    GameCmd.prototype.train = function(predType, predName) {
      var _ref1;
      _ref1 = ["train", predType, predName], this.verb = _ref1[0], this.predicateType = _ref1[1], this.predicateName = _ref1[2];
      return this;
    };

    GameCmd.prototype.and = function() {
      return this;
    };

    return GameCmd;

  })();

  SCSim.Cmd = (function() {
    var train;

    function Cmd(subject, verbs) {
      this.subject = subject;
      this.verbs = verbs != null ? verbs : [];
    }

    Cmd.selectA = function(name) {
      return new this(function(hud) {
        var _ref1, _ref2;
        return ((_ref1 = hud.structures[name]) != null ? _ref1[0] : void 0) || ((_ref2 = hud.units[name]) != null ? _ref2[0] : void 0);
      });
    };

    Cmd.prototype.and = function() {
      return this;
    };

    Cmd.prototype.say = function(msg, a, b, c, d) {
      this.verbs.push(function(unit) {
        return unit.say(msg, a, b, c, d);
      });
      return this;
    };

    train = {
      structure: function(name) {},
      unit: function(name) {}
    };

    Cmd.prototype.execute = function(hud) {
      var s, v, _i, _len, _ref1, _results;
      s = this.subject(hud);
      _ref1 = this.verbs;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        _results.push(v(s));
      }
      return _results;
    };

    return Cmd;

  })();

}).call(this);
