// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, addSeries, options, root, runSim, series, _ref, _ref1;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = root.SCSim;

  runSim = function(workerCount, simLength) {
    var base, e, i, lastWorkerEvent, results, sim, tickToDate, _i, _j, _k, _len, _ref;
    if (simLength == null) {
      simLength = 600;
    }
    tickToDate = function(t) {
      return new Date(t * 1000);
    };
    sim = new SCSim.EconSim;
    sim.logger.fwatchFor('mineralsCollected', function(e) {
      return [tickToDate(e.eventTime), e.args[0] / (e.eventTime / 60)];
    });
    sim.logger.fwatchFor('doneBuildingWorker', function(e) {
      return tickToDate(e.eventTime);
    });
    base = sim.createActor(SCSim.SimBase);
    sim.say('start');
    for (i = _i = 1; 1 <= workerCount ? _i <= workerCount : _i >= workerCount; i = 1 <= workerCount ? ++_i : --_i) {
      base.say('buildNewWorker');
    }
    for (i = _j = 0; 0 <= simLength ? _j <= simLength : _j >= simLength; i = 0 <= simLength ? ++_j : --_j) {
      sim.update();
    }
    results = {
      data: [[0, 0]],
      markings: []
    };
    _ref = sim.logger.event('mineralsCollected');
    for (_k = 0, _len = _ref.length; _k < _len; _k++) {
      e = _ref[_k];
      results.data.push(e);
    }
    lastWorkerEvent = _(sim.logger.event('doneBuildingWorker')).last();
    results.markings.push({
      xaxis: {
        from: lastWorkerEvent,
        to: lastWorkerEvent
      },
      color: "#fdbbdb"
    });
    return results;
  };

  options = {
    grid: {
      borderWidth: 0,
      markings: []
    },
    xaxis: {
      mode: "time",
      timeformat: "%M:%S"
    }
  };

  series = [];

  addSeries = function(series, options, workerCount) {
    var results;
    results = runSim(workerCount);
    series.push({
      data: results.data,
      shadowSize: 0,
      lines: {
        lineWidth: 2
      }
    });
    options.grid.markings = options.grid.markings.concat(results.markings);
    return {
      series: series,
      options: options
    };
  };

  _ref = addSeries(series, options, 10), series = _ref.series, options = _ref.options;

  _ref1 = addSeries(series, options, 5), series = _ref1.series, options = _ref1.options;

  $.plot($("#placeholder"), series, options);

}).call(this);
