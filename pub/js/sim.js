// Generated by CoffeeScript 1.3.1
(function() {
  var Base, EconSim, MineralPatch, SimActor, Worker, root,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  SimActor = (function() {

    SimActor.name = 'SimActor';

    function SimActor() {}

    SimActor.prototype.$ay = function() {
      var args, msgName;
      msgName = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this['msg_' + msgName](args);
    };

    return SimActor;

  })();

  EconSim = (function(_super) {

    __extends(EconSim, _super);

    EconSim.name = 'EconSim';

    function EconSim(baseCount) {
      var i;
      this.bases = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= baseCount ? _i <= baseCount : _i >= baseCount; i = 1 <= baseCount ? ++_i : --_i) {
          _results.push(new Base);
        }
        return _results;
      })();
    }

    return EconSim;

  })(SimActor);

  Base = (function(_super) {

    __extends(Base, _super);

    Base.name = 'Base';

    function Base(workerCount, mineralPatchCount) {
      var i;
      this.workers = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= workerCount ? _i <= workerCount : _i >= workerCount; i = 1 <= workerCount ? ++_i : --_i) {
          _results.push(new Worker);
        }
        return _results;
      })();
      this.mins = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; 1 <= mineralPatchCount ? _i <= mineralPatchCount : _i >= mineralPatchCount; i = 1 <= mineralPatchCount ? ++_i : --_i) {
          _results.push(new MineralPatch);
        }
        return _results;
      })();
    }

    return Base;

  })(SimActor);

  MineralPatch = (function(_super) {

    __extends(MineralPatch, _super);

    MineralPatch.name = 'MineralPatch';

    function MineralPatch(startingAmt) {
      this.amt = startingAmt || 100;
      this.workers = [];
    }

    MineralPatch.prototype.msg_attachWorker = function(worker) {
      return this.workers.push(worker);
    };

    MineralPatch.prototype.msg_mineralsHarvested = function(amtHarvested) {
      return this.amt -= amtHarvested;
    };

    return MineralPatch;

  })(SimActor);

  Worker = (function(_super) {

    __extends(Worker, _super);

    Worker.name = 'Worker';

    function Worker() {
      this.t_toBase = 10;
      this.t_toPatch = 10;
      this.t_mine = 5;
      this.collectAmt = 5;
      this.state = this.state_atBase();
    }

    Worker.prototype.update = function(t) {
      return this.state(t);
    };

    Worker.prototype.state_atBase = function(t) {};

    return Worker;

  })(SimActor);

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Worker = Worker;

  root.EconSim = EconSim;

  root.Base = Base;

  root.MineralPatch = MineralPatch;

  root.SimActor = SimActor;

}).call(this);
