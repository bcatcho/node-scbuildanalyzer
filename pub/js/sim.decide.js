// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, root, _, _ref;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  _ = root._;

  SCSim = (_ref = root.SCSim) != null ? _ref : {};

  root.SCSim = SCSim;

  SCSim.Hud = (function() {

    Hud.name = 'Hud';

    function Hud(eventLog) {
      this.minerals = 0;
      this.gas = 0;
      this.supply = 0;
      this.supplyCap = 0;
      this.production = {};
      this.productionPotential = {};
      this.alerts = [];
      this.economy = {};
      this.units = {};
      this.buildings = {};
      this.techTree = {};
      this.setupEvents(eventLog);
    }

    Hud.prototype.exampleProduction = function() {
      return {
        thing: "name",
        timeLeft: 0,
        alertWhenDone: "name is done"
      };
    };

    Hud.prototype.updateWithEventLog = function(eventLog) {};

    Hud.prototype.setupEvents = function(eventLog) {};

    return Hud;

  })();

  SCSim.Smarts = (function() {

    Smarts.name = 'Smarts';

    function Smarts() {
      this.strategies = {};
      this.path = {};
      this.goals = {};
    }

    Smarts.prototype.decide = function(hud) {};

    Smarts.prototype.applyStrategy = function(inputName, methodThatDecidesWhatToDo) {};

    return Smarts;

  })();

  SCSim.SimRun = (function() {

    SimRun.name = 'SimRun';

    function SimRun(smarts) {
      this.smarts = smarts;
      this.eventLog = new SCSim.EventLog;
      this.hud = new SCSim.Hud(this.eventLog);
      this.sim = new SCSim.Simulation(this.eventLog);
    }

    SimRun.prototype.mainLoop = function() {
      var commands;
      this.hud.updateWithEventLog(this.eventLog);
      commands = this.smarts.decide(this.hud);
      return this.sim.update(commands);
    };

    return SimRun;

  })();

}).call(this);
