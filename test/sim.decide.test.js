// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, chai, root, should, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = root.SCSim;

  _ = root._;

  chai = root.chai;

  should = chai.should();

  describe("SCSim.GameRules", function() {
    var rules;
    rules = null;
    beforeEach(function() {
      var gameData;
      gameData = new SCSim.GameData;
      gameData.addUnit("testUnit", 10, 20, 1, 1);
      return rules = new SCSim.GameRules(gameData);
    });
    return describe("canTrainUnit()", function() {
      it("should be true if enough supply, gas, min, and tech", function() {
        var hud, result;
        hud = {
          minerals: 10,
          gas: 20,
          supply: 0,
          supplyCap: 100
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["true"];
      });
      it("should be false if unit min&gas cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 19
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
      it("should be false if only unit min cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 100
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
      return it("should be false if unit would excede supply cap", function() {
        var hud, result;
        hud = {
          minerals: 100,
          gas: 100,
          supply: 0,
          supplyCap: 0
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
    });
  });

  SCSim.TestCmdBehavior = (function(_super) {

    __extends(TestCmdBehavior, _super);

    TestCmdBehavior.name = 'TestCmdBehavior';

    function TestCmdBehavior() {
      this._prop = 0;
      TestCmdBehavior.__super__.constructor.call(this);
    }

    TestCmdBehavior.prototype.prop = function() {
      return this._prop;
    };

    TestCmdBehavior.defaultState({
      messages: {
        prop100: function() {
          return this._prop = 100;
        },
        propTimes2: function() {
          return this._prop *= 2;
        }
      }
    });

    return TestCmdBehavior;

  })(SCSim.Behavior);

  describe("SCSim.Cmd", function() {
    var gameData;
    gameData = new SCSim.GameData;
    gameData.addUnit("testUnit", 0, 0, 2, 0, {
      name: "TestCmdBehavior"
    });
    describe("select()", function() {
      var hud, sim;
      hud = null;
      sim = null;
      beforeEach(function() {
        var simRun;
        simRun = new SCSim.SimRun(gameData);
        sim = simRun.sim;
        return hud = simRun.hud;
      });
      return it("constructs a command on selectUnit", function() {
        var cmd, unit;
        unit = sim.makeActor("testUnit");
        hud.addUnit(unit);
        cmd = SCSim.Cmd.selectA("testUnit");
        return cmd.should.be.an.instanceOf(SCSim.Cmd);
      });
    });
    return describe("say()", function() {
      var hud, sim;
      hud = null;
      sim = null;
      beforeEach(function() {
        var simRun;
        simRun = new SCSim.SimRun(gameData);
        sim = simRun.sim;
        return hud = simRun.hud;
      });
      it("returns a cmd that modifies a specific type of actor", function() {
        var cmd, unit;
        unit = sim.makeActor("testUnit");
        hud.addUnit(unit);
        cmd = SCSim.Cmd.selectA("testUnit").say("prop100");
        cmd.execute(hud);
        return unit.get("prop").should.equal(100);
      });
      return it("can be chained with other commands", function() {
        var cmd, unit;
        unit = sim.makeActor("testUnit");
        hud.addUnit(unit);
        cmd = SCSim.Cmd.selectA("testUnit").say("prop100").say("propTimes2");
        cmd.execute(hud);
        return unit.get("prop").should.equal(200);
      });
    });
  });

}).call(this);
