// Generated by CoffeeScript 1.3.3
(function() {
  var SCSim, SCe, chai, expect, root, should, _;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = root.SCSim;

  SCe = SCSim.Enums;

  _ = root._;

  chai = root.chai;

  should = chai.should();

  expect = chai.expect;

  describe("SCSim.GameRules", function() {
    var gState, rules;
    rules = gState = null;
    beforeEach(function() {
      var emitter, gameData;
      gameData = new SCSim.GameData;
      gameData.addUnit("testUnit", 10, 10, 1, 1);
      rules = new SCSim.GameRules(gameData);
      emitter = new SCSim.EventEmitter;
      return gState = new SCSim.GameState(emitter, rules);
    });
    describe("canTrainUnit()", function() {
      it("should be true if enough supply, gas, min, and tech", function() {
        var hud, result;
        hud = {
          minerals: 10,
          gas: 20,
          supply: 0,
          supplyCap: 100
        };
        result = rules.canTrainUnit(hud, "testUnit");
        return result.should.be["true"];
      });
      it("should be false if unit min&gas cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 19
        };
        result = rules.canTrainUnit(hud, "testUnit");
        return result.should.be["false"];
      });
      it("should be false if only unit min cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 100
        };
        result = rules.canTrainUnit(hud, "testUnit");
        return result.should.be["false"];
      });
      return it("should be false if unit would excede supply cap", function() {
        var hud, result;
        hud = {
          minerals: 100,
          gas: 100,
          supply: 0,
          supplyCap: 0
        };
        result = rules.canTrainUnit(hud, "testUnit");
        return result.should.be["false"];
      });
    });
    describe("applyCollectResources()", function() {
      return it("should increase minerals and gas", function() {
        gState.resources.minerals = 0;
        gState.resources.gas = 0;
        rules.applyCollectResources(gState, 5, 7);
        gState.resources.minerals.should.equal(5);
        return gState.resources.gas.should.equal(7);
      });
    });
    return describe("applyTrainUnit()", function() {
      return it("should affect min, gas and supply", function() {
        gState.resources.minerals = 10;
        gState.resources.gas = 10;
        gState.supply.inUse = 0;
        gState.supply.cap = 10;
        rules.applyTrainUnit(gState, "testUnit");
        gState.resources.minerals.should.equal(0);
        gState.resources.gas.should.equal(0);
        return gState.supply.inUse.should.equal(1);
      });
    });
  });

  describe("SCSim.GameCmd", function() {
    describe("fluent interface", function() {
      return it("should make a new GameCmd that selects a probe unit", function() {
        var cmd;
        cmd = SCSim.GameCmd.select("probe");
        return cmd.subject.should.equal("probe");
      });
    });
    return describe("train", function() {
      return it("can supply a predicate to build a nexus structure with a probe", function() {
        var cmd;
        cmd = SCSim.GameCmd.select("probe").and.train("nexus");
        cmd.verb.should.equal("train");
        return cmd.verbObject.should.equal("nexus");
      });
    });
  });

  describe("SCSim.GameState", function() {
    var emitter, gState;
    gState = emitter = null;
    beforeEach(function() {
      var rules;
      rules = new SCSim.GameRules(SCSim.data);
      emitter = new SCSim.EventEmitter;
      return gState = new SCSim.GameState(emitter, rules);
    });
    return it("increases in minerals on Msg.DepositMinerals", function() {
      emitter.makeAndFire(SCe.Msg.DepositMinerals, null, null, 5);
      return gState.resources.minerals.should.equal(5);
    });
  });

  describe("SCSim.GameCmdInterpreter", function() {
    var emitter, gState, interp, rules;
    interp = rules = gState = emitter = null;
    beforeEach(function() {
      var gameData;
      gameData = new SCSim.GameData;
      gameData.addUnit("testUnit", 10, 10, 1, 1);
      rules = new SCSim.GameRules(gameData);
      emitter = new SCSim.EventEmitter;
      gState = new SCSim.GameState(emitter, rules);
      return interp = new SCSim.GameCmdInterpreter;
    });
    return describe("canApplyRule", function() {
      it("returns true when enough resources & supply to train", function() {
        var cmd, result;
        gState.resources.minerals = 10;
        gState.resources.gas = 10;
        gState.supply.inUse = 0;
        gState.supply.cap = 10;
        cmd = SCSim.GameCmd.select("nexus").and.train("testUnit");
        result = interp.canExecute(gState, rules, cmd);
        return result.should.be["true"];
      });
      return it("returns false when there isnt enough minerals to train", function() {
        var cmd, result;
        gState.resources.minerals = 0;
        gState.resources.gas = 10;
        gState.supply.inUse = 0;
        gState.supply.cap = 10;
        cmd = SCSim.GameCmd.select("nexus").and.train("testUnit");
        result = interp.canExecute(gState, rules, cmd);
        return result.should.be["false"];
      });
    });
  });

}).call(this);
