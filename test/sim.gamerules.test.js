// Generated by CoffeeScript 1.3.3
(function() {
  var SCSim, chai, expect, root, should, _;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = root.SCSim;

  _ = root._;

  chai = root.chai;

  should = chai.should();

  expect = chai.expect;

  describe("SCSim.GameRules", function() {
    var rules;
    rules = null;
    beforeEach(function() {
      var gameData;
      gameData = new SCSim.GameData;
      gameData.addUnit("testUnit", 10, 20, 1, 1);
      return rules = new SCSim.GameRules(gameData);
    });
    return describe("canTrainUnit()", function() {
      it("should be true if enough supply, gas, min, and tech", function() {
        var hud, result;
        hud = {
          minerals: 10,
          gas: 20,
          supply: 0,
          supplyCap: 100
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["true"];
      });
      it("should be false if unit min&gas cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 19
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
      it("should be false if only unit min cost more than our bank", function() {
        var hud, result;
        hud = {
          minerals: 9,
          gas: 100
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
      return it("should be false if unit would excede supply cap", function() {
        var hud, result;
        hud = {
          minerals: 100,
          gas: 100,
          supply: 0,
          supplyCap: 0
        };
        result = rules.canTrainUnit("testUnit", hud);
        return result.should.be["false"];
      });
    });
  });

  describe("SCSim.GameCmd", function() {
    describe("fluent interface", function() {
      it("should make a new GameCmd that selects a probe unit", function() {
        var cmd;
        cmd = SCSim.GameCmd.select("unit", "probe");
        return cmd.should.be.an["instanceof"](SCSim.GameCmd);
      });
      return it("should make a new GameCmd that selects a nexus structure", function() {
        var cmd;
        cmd = SCSim.GameCmd.select("structure", "nexus");
        return cmd.should.be.an["instanceof"](SCSim.GameCmd);
      });
    });
    return describe("train", function() {
      return it("can supply a predicate to build a nexus structure with a probe", function() {
        var cmd;
        cmd = SCSim.GameCmd.select("unit", "probe");
        cmd.train("structure", "nexus");
        cmd.verb.should.equal("train");
        cmd.predicateType.should.equal("structure");
        return cmd.predicateName.should.equal("nexus");
      });
    });
  });

}).call(this);
