// Generated by CoffeeScript 1.3.3
(function() {
  var SCSim, chai, root, should, testHelper, _;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  SCSim = root.SCSim;

  _ = root._;

  chai = root.chai;

  should = chai.should();

  SCSim.config.secsPerTick = .5;

  testHelper = {
    setupMapWithNoProbes: function(sim) {
      var nexus;
      nexus = sim.makeActor("nexus");
      return nexus.say("trainInstantly");
    }
  };

  describe('Simulation with one base one worker', function() {
    var base, sim, simRun;
    simRun = new SCSim.SimRun;
    sim = simRun.sim;
    simRun.start();
    base = simRun.gameState.structures.nexus[0];
    return describe('When the base creates a new worker', function() {
      base.say("trainUnit", 'probe');
      return it('the base should receive minerals after some time', function() {
        var i, _i;
        for (i = _i = 1; _i <= 60; i = ++_i) {
          simRun.update();
        }
        return base.behaviors["PrimaryStructure"].mineralAmt.should.be.above(0);
      });
    });
  });

  describe('Simulation with one base and two workers', function() {
    var harvestedMinPatchIds, simRun,
      _this = this;
    simRun = new SCSim.SimRun;
    simRun.start(testHelper.setupMapWithNoProbes);
    harvestedMinPatchIds = [];
    simRun.emitter.observe("targetedByHarvester", function(e) {
      return harvestedMinPatchIds.push(e.simId);
    });
    simRun.executeCmd(SCSim.GameCmd.select("nexus").and.train('probe'));
    simRun.executeCmd(SCSim.GameCmd.select("nexus").and.train('probe'));
    simRun.executeCmd(SCSim.GameCmd.select("nexus").and.train('probe'));
    it('workers will seek other resources if theirs is taken', function() {
      var harvesterChangedResources, timeOut,
        _this = this;
      timeOut = 100;
      harvesterChangedResources = false;
      simRun.emitter.observe("changeTargetResource", function(e) {
        return harvesterChangedResources = true;
      });
      while (timeOut-- >= 0 && harvesterChangedResources === false) {
        simRun.update();
      }
      return harvesterChangedResources.should.be["true"];
    });
    return it('will find other min patches', function() {
      return _(harvestedMinPatchIds).unique().length.should.equal(2);
    });
  });

}).call(this);
