// Generated by CoffeeScript 1.3.1
(function() {
  var SCSim, chai, root, should, _;

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  chai = root.chai;

  should = chai.should();

  SCSim = root.SCSim;

  _ = root._;

  SCSim.config.secsPerTick = 1;

  describe('Simulation with one base one worker', function() {
    var base, sim;
    sim = new SCSim.Simulation;
    base = null;
    describe('When told to create a new Simulation::Base', function() {
      return base = sim.makeActor("nexus");
    });
    describe('When told to start', function() {
      it('should change state to running', function() {
        sim.say('start');
        return sim.stateName.should.equal('running');
      });
      return it('should be at tick count = 0', function() {
        return sim.time.tick.should.equal(0);
      });
    });
    return describe('When the base creates a new worker', function() {
      base.say('buildUnit', 'probe');
      return it('the base should receive minerals after some time', function() {
        var i, _i;
        for (i = _i = 1; _i <= 50; i = ++_i) {
          sim.update();
        }
        return base.behaviors["PrimaryStructure"].mineralAmt.should.be.above(0);
      });
    });
  });

  describe('Simulation with one base and two workers', function() {
    var base, sim;
    sim = new SCSim.Simulation;
    sim.logger.fwatchFor('workerStartedMining', function(e) {
      return "" + e.simId;
    });
    sim.say('start');
    base = sim.makeActor("nexus");
    it('should queue up two workers at base', function() {
      base.say('buildUnit', 'probe');
      base.say('buildUnit', 'probe');
      base.say('buildUnit', 'probe');
      return base.behaviors["Trainer"].buildQueue.length.should.equal(3);
    });
    it('will make the first worker harvest while the 2nd builds', function() {
      while (base.behaviors["Trainer"].buildQueue.length > 0) {
        sim.update();
      }
      return base.behaviors["PrimaryStructure"].mineralAmt.should.be.above(0);
    });
    return it('will distribute the workers amongst two mineral patches', function() {
      var i, timeOut, _i;
      timeOut = 200;
      while (!sim.logger.eventOccurs('workerCanceledHarvest', timeOut--)) {
        sim.update();
      }
      for (i = _i = 1; _i <= 40; i = ++_i) {
        sim.update();
      }
      console.log(_(sim.logger.event('workerStartedMining')).unique());
      return _(sim.logger.event('workerStartedMining')).unique().length.should.be.above(1);
    });
  });

}).call(this);
